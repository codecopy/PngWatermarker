{"name":"PngWatermarker","tagline":"PNG watermarking library for .NET 4.5+","body":"#PngWatermarker \r\n\r\n\r\nPngWatermarker is a .NET 4.5+ library for the embedding and extraction of invisible watermarks on PNG files.\r\n\r\n##Features\r\n\r\n  - Embed various watermarks into PNG files\r\n  - Extract the watermarks at a later time\r\n  - A watermarked image is almost impossible to distinguish.\r\n  - Clever embedding process ensures the watermark is not stored in a sequential pattern\r\n\r\n##Watermark Types\r\n\r\n###Basic\r\n* Text Watermark\r\n * Allows for the storage of a String.\r\n* File Watermark\r\n * Allows for the storage of a file, preserving the original extension.\r\n* Binary Watermark\r\n * Allows for the storage of binary data. \r\n\r\n###Advanced\r\n* Composite Watermark\r\n * Allows for the storage of 1 to many basic watermarks as a single watermark in the image.\r\n* Encrypted Watermark\r\n * Allows for the encryption and storage of any watermark (except other Encrypted Watermarks).\r\n * Encryption is performed by any SymmetricAlgorithm subclass.\r\n\r\n##Examples\r\n\r\n###Text Watermark\r\n\r\n```C#\r\nPNGFile file = new PNGFile(\"MyOriginal.png\");\r\nTextWatermark mark = new TextWatermark(\"This is a text based watermark\");\r\n\r\nWatermarker.EmbedWatermark(file,mark,\"password\",\"MyOutput.png\");\r\n\r\n//Extraction\r\n\r\nfile = new PNGFile(\"MyOutput.png\");\r\nTextWatermark extract = (TextWatermark)Watermarker.ExtractWatermark(file,\"password\");\r\n\r\n```\r\n\r\n###Composite Watermark\r\n\r\n```C#\r\nPNGFile file = new PNGFile(\"MyOriginal.png\");\r\n\r\nCompositeWatermark comp = new CompositeWatermark();\r\nFileWatermark fileMark = new FileWatermark(\"MyFile.txt\");\r\nBinaryWatermark binMark = new BinaryWatermark(new byte[]{1,2,3,4});\r\n\r\ncomp.AddWatermark(fileMark);\r\ncomp.AddWatermark(binMark);\r\n\r\nWatermarker.EmbedWatermark(file,comp,\"password\",\"MyOutput.png\");\r\n\r\n//Extraction\r\nPNGFile file2 = new PNGFile(\"MyOutput.png\");\r\n\r\nCompositeWatermark extract = (CompositeWatermark)Watermarker.ExtractWatermark(file2,\"password\");\r\nWatermark[] marks = extract.GetWatermarks();\r\n\r\n```\r\n\r\n###Encrypted Watermark\r\n```C#\r\nPNGFile file = new PNGFile(\"MyOriginal.png\");\r\nRijndaelManaged aes = new RijndaelManaged();\r\naes.Padding = PaddingMode.Zeroes;\r\n\r\nTextWatermark mark = new TextWatermark(\"This should be encrypted\");\r\nEncryptedWatermark encrypted = new EncryptedWatermark(mark, aes, \"super-secret\");\r\n\r\nWatermarker.EmbedWatermark(file, encrypted, \"password\", \"MyOutput.png\");\r\n\r\nWatermarker.DefaultCrypto = aes;\r\nPNGFile file2 = new PNGFile(\"MyOutput.png\");\r\n\r\nEncryptedWatermark extract = Watermarker.ExtractWatermark(file2, \"password\");\r\nextract.Decrypt(\"super-secret\");\r\n\r\nWatermark decrypted = extract.DecryptedMark;\r\n```\r\n\r\n## Original File\r\n![Original File](images/Flower_Original.png)\r\n\r\n## File holding a watermark\r\n![Watermarked File](images/TextMark.png)","google":"UA-47231707-3","note":"Don't delete this file! It's used internally to help with page regeneration."}